"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.post = exports.get = void 0;
var node_https_1 = __importDefault(require("node:https"));
var async_retry_1 = __importDefault(require("async-retry"));
function makeRequest(hostname, method, path, headers, requestData) {
    var options = {
        method: method,
        hostname: hostname,
        path: path,
        headers: headers,
    };
    return new Promise(function (resolve, reject) {
        var chunks = [];
        var req = node_https_1.default
            .request(options, function (res) {
            res.on('data', function (chunk) {
                chunks.push(chunk);
            });
            res.on('end', function () {
                var _a, _b;
                try {
                    var body = Buffer.concat(chunks).toString();
                    if (!res.statusCode || res.statusCode < 200 || res.statusCode > 299) {
                        var error = new Error("path=".concat(req.path, " ,statusCode=").concat(res.statusCode, ", contents=").concat(body));
                        reject(error);
                    }
                    else if ((_a = res.headers['content-type']) === null || _a === void 0 ? void 0 : _a.includes('application/json')) {
                        resolve(JSON.parse(body));
                    }
                    else if ((_b = res.headers['content-type']) === null || _b === void 0 ? void 0 : _b.includes('text/plain')) {
                        resolve(body);
                    }
                    resolve(null);
                }
                catch (e) {
                    reject(e);
                }
            });
        })
            .on('error', function (err) {
            reject(err);
        });
        if (requestData) {
            req.write(JSON.stringify(requestData));
        }
        req.end();
    });
}
var get = function (hostname, path, headers) {
    return (0, async_retry_1.default)(function () { return makeRequest(hostname, 'GET', path, headers); }, { retries: 4 });
};
exports.get = get;
var post = function (hostname, path, headers, requestData) {
    return (0, async_retry_1.default)(function () { return makeRequest(hostname, 'POST', path, headers, requestData); }, { retries: 4 });
};
exports.post = post;
