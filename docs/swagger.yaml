---
openapi: 3.0.2
info:
  title: Report API
  version: '0.2'
servers:
- url: https://apitest.vipps.no
- url: https://api.vipps.no
paths:

  "/v1/ledgers":
    get:
      parameters:
        - $ref: "#/components/parameters/JWT"
        - in: query
          name: msn
          required: false
          schema:
            type: string
            example: 123456
            description: Filters for ledgers that settles for the given msn
        - in: query
          name: vippsnummer
          required: false
          schema:
            type: string
            example: 123456
            description: Filters for ledgers that settles for the given vippsnummer
      responses:
        500:
          "$ref": "#/components/responses/500"
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Ledger"

  "/v1/ledgers/{ledgerId}/transactions":
    get:
      parameters:
        - $ref: "#/components/parameters/JWT"
        - in: path
          required: true
          name: ledgerId
          schema:
            type: string
        - in: query
          required: false
          name: ledgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-20
        - in: query
          required: false
          name: fromLedgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-19
        - in: query
          required: false
          name: toLedgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-22
        - in: query
          required: false
          name: fromTimestamp
          schema:
            type: string
            format: DateTime
            example: 2022-09-22T08:00:00+00:00
        - in: query
          required: false
          name: toTimestamp
          schema:
            type: string
            format: DateTime
            example: 2022-09-22T10:00:00+00:00
        - in: query
          required: false
          name: inPayout
          schema:
            type: string
            example: 2000010
        - in: query
          required: false
          name: sincePayout
          schema:
            type: string
            example: 2000010
        - in: query
          required: false
          name: columns
          schema:
            type: array
            items:
              type: string
              enum:
                - transactionId
                - timestamp
                - transactionType
                - reference
                - orderId
                - ledgerId
                - ledgerDate
                - ledgerAmount
                - grossAmount
                - fee
                - msn
                - time
                - price.description
      responses:
        500:
          "$ref": "#/components/responses/500"
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Transaction"
            text/csv:
              schema:
                type: string
              examples:
                csv table:
                  summary: List of transactions
                  value: |-
                    transactionId, timestamp, ledgerDate, ledgerId, transactionType, orderId, ledgerAmount.value, ledgerAmount.currency, grossAmount.value, grossAmount.currency, fee.value, fee.currency, priceRate, priceFixed.value, priceFixed.currency, storeId, storeName
                    2000001, 2022-09-22T09:31:28+00:00, 2022-09-22, 1, refund, 1, 0, NOK, 0, NOK, 0, NOK, 1.25, 0, NOK, msn/123456, Lokalbutikk Løkka

components:
  parameters:
    JWT:
      name: Authorization
      in: header
      description: |-
        The access token is a base64-encoded string that is required for all API calls.
        It is a JWT (JSON Web Token).
        It is valid for 1 hour in the test environment and 24 hours in the production environment.
      required: true
      schema:
        type: string
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."

  responses:
    500:
      description: Server error
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                description: An URI-reference that identities the problem type
                example: "https://example.net/validation-error"
              title:
                type: string
                description: A human readable summary of the problem
                example: "Your request parameters didn't validate."
              instance:
                type: string
                description: Unique id for the request which can be used to find related events (logs)
                example: "123e4567-e89b-12d3-a456-426655440000"
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: Unauthorized
              message:
                type: string
                example: "Please check your API keys"
  schemas:
    BankAccount:
      type: object
      properties:
        country:
          type: string
          example: "NO"
        accountNumber:
          type: string
          example: "86011117947"
    Ledger:
      type: object
      properties:
        ledgerId:
          type: string
          example: "302321"
        payoutBankAccount:
          $ref: "#/components/schemas/BankAccount"
        firstPayout:
          type: string
          nullable: true
          example: "2000001"
        lastPayout:
          type: string
          nullable: true
          example: "2000045"
        owner:
          $ref: "#/components/schemas/Organization"
        settlesFor:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/LedgerSettlesForEpayment"
              - $ref: "#/components/schemas/LedgerSettlesForVippsnummer"
    LedgerSettlesForEpayment:
      type: object
      properties:
        type:
          type: string
          enum:
            - epayment
        msn:
          type: string
          example: "123456"
    LedgerSettlesForVippsnummer:
      type: object
      properties:
        type:
          type: string
          enum:
            - vippsnummer
        vippsnummer:
          type: string
          example: "123456"
        country:
          type: string
          example: 'NO'
    Transaction:
      type: object
      properties:
        transactionId:
          type: string
          example: '2000001'
        timestamp:
          type: string
          format: DateTime
          example: '2022-09-22T09:31:28+00:00'
        ledgerDate:
          type: string
          format: Date
          example: '2022-09-22'
        ledgerId:
          type: string
          example: '1'
        transactionType:
          type: string
          enum:
            - refund
            - capture
            - invoice
            - payout
        orderId:
          type: string
          description: |-
            Is also called End-To-End-Reference
          example: acme-shop-123-order123abc
        ledgerAmount:
          $ref : "#/components/schemas/Money"
          description: |-
            Contribution to the ledger balance.
        grossAmount:
          $ref : "#/components/schemas/Money"
        fee:
          $ref : "#/components/schemas/Money"
        priceRate:
          type: number
          format: double
          example: 1.25
          description: |-
            The percentage rate used.
        priceFixed:
          $ref : "#/components/schemas/Money"
        storeId:
          type: string
          example: msn/123456
          description: |-
            The store id. Can be 'msn/123456' or 'vippsnummer/123456'.
        storeName:
          type: string
          example: "Lokalbutikk Løkka"
    Organization:
      type: object
      properties:
        id:
          type: string
          example: "987654321"
        jurisdiction:
          type: string
          enum:
            - "NO"
          example: "NO"
    Money:
      type: object
      properties:
        value:
          type: number
          format: int32
          description: |-
            Amounts are specified in minor units.
            For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
          example: 49900
        currency:
          type: string
          example: 'NOK'
          description: |-
            Currency code as defined in ISO 4217
