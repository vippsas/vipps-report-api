---
openapi: 3.0.2
info:
  title: Report API
  description: |
    The Report API provides data for payments for accounting purposes.

    For detailed information about payments, the payment API (such as the eCom,
    ePayment API or Recurring API) should be used. 

    This API is primarily for accounting partners who will use the API to integrate with their
    accounting systems, allowing them to provide the accounting information to their merchants. 

    For details, see the [API Guide](https://developer.vippsmobilepay.com/docs/APIs/report-api/api-guide/).
  version: '2.0'
servers:
  - url: https://apitest.vipps.no
  - url: https://api.vipps.no
tags: []
paths:
  "/settlement/v1/ledgers":
    get:
      summary: Get ledgers
      deprecated: false
      description: |
        Returns the ledgers you have access to.

        If you are integrating a single
        merchant it may be enough to hit this endpoint once manually to identify
        the `ledgerId`, and then put that in your configuration.
        If you are integrating for an accounting system or similar, you should
        call this endpoint periodically in order to synchronize the list
        of ledgers you have access to.

        There is no need to specify the merchant or sales unit.
        The response contains all ledgers that are available for the API keys used.

        The `settlesForRecipientHandles` part of the response looks a bit different for eCom sales
        units and Vippsnummer. For ePayment and eCom it looks like this:
        ```json
        {
          "settlesForRecipientHandles": [ "api:123455" ]
        }
        ```
        while for a Vippsnummer and MyShop (VM-number) you will get:

        ```json
        {
          "settlesForRecipientHandles": [ "NO:123455" ]
        }
        ```

        The full response example below displays the ePayment and eCom case.

      tags:
        - /settlement/v1
      operationId: getLedgers
      parameters:
        - $ref: "#/components/parameters/JWT"
        - $ref: '#/components/parameters/Vipps-System-Name'
        - $ref: '#/components/parameters/Vipps-System-Version'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Name'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Version'
        - in: query
          name: settlesForRecipientHandles
          required: false
          schema:
            type: string
            description: |-
              Filters for ledgers that settles for the given `settlesForRecipientHandle`.
            example: "api:123456"
        - in: query
          required: false
          name: cursor
          schema:
            type: string
            example: "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ=="
            description: |-
              We limit the amount of rows returned to reduce the amount of data we need to process on each request. 
              If the total number of rows is greater than that amount we return a cursor in addition to
              the rows in the body. This cursor given can be used with this parameter to fetch the next set of ledgers.
              If this is used, no other parameters is needed.
      responses:
        500:
          "$ref": "#/components/responses/500"
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    type: string
                    example: "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ=="
                    description: |-
                      A cursor that can be used to fetch the next ledgers.
                      It is empty if there are no more rows to fetch after the current one.
                      You can insert this value into the url as part of the cursor parameter.
                  items:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Ledger"
                example:
                  {
                    "cursor": "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ==",
                    "items": [
                      {
                        "ledgerId": "302321",
                        "currency": "NOK",
                        "payoutBankAccount": {
                          "scheme": "BBAN:NO",
                          "id": "86011117947"
                        },
                        "firstPayout": "2000001",
                        "lastPayout": "2000045",
                        "owner": {
                          "scheme": "business:NO:ORG",
                          "id": "987654321"
                        },
                        "settlesForRecipientHandles": [ "api:123455" ]
                      }
                    ]
                  }
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  "/report/v2/ledgers/{ledgerId}/{topic}/dates/{ledgerDate}":
    get:
      tags:
        - /report/v2/ledgers
      summary: Fetch report by date
      description: |-
        Complete report of entries on an account for a given "ledger date".
        A "ledger date" normally lasts from midnight to midnight in the timezone
        of the merchant; but it can be configured to other cutoffs such as 04:00 to 04:00.
        The caller should periodically poll for a report for the next date to download,
        and interpret HTTP 404 as a signal to try again later.
        You can get two different types of ledgers with this endpoint. The funds ledger, which
        tracks the sales, refunds, and a total of fees for the time period, and the fees ledger, which
        provides details about the fees you have been charged.

      parameters:
        - $ref: '#/components/parameters/Vipps-System-Name'
        - $ref: '#/components/parameters/Vipps-System-Version'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Name'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Version'
        - in: path
          name: ledgerId
          required: true
          schema:
            type: string
            description: Ledger ID provided by `GET:/settlement/v1/ledgers`.
        - in: path
          name: ledgerDate
          required: true
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2}'
            description: Date in format YYYY-MM-DD.
        - in: path
          name: topic
          required: true
          schema:
            type: string
            enum:
              - funds
              - fees
            description: |-
              `funds` provides the funds ledger which tracks the sales, refunds, and a total of fees for the time period. `fees` 
              provides the fees ledger with details about the fees you have been charged.
        - in: query
          required: false
          name: cursor
          schema:
            type: string
            example: "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ=="
            description: |-
              We limit the amount of rows returned to reduce the amount of data we need to process on each request. 
              If the total number of rows is greater than that amount we return a cursor in addition to
              the rows in the body. This cursor given can be used with this parameter to fetch the next set of ledgers.
              If this is used, no other parameters is needed.
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          description: The report for this date is not available yet
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  "/report/v2/ledgers/{ledgerId}/{topic}/feed":
    get:
      tags:
        - /report/v2/ledgers
      summary: Fetch report by feed
      description: |-
        Continuous stream of data. Upon reaching the end of the feed, the `cursor` will not become empty and `items` can 
        become an empty list. One should retry to fetch the same `cursor` until new data and a new `cursor` will be returned.
        Unless in the need of data with low latency try not to poll the endpoint too often and effectively batch your reports.
      parameters:
        - $ref: '#/components/parameters/Vipps-System-Name'
        - $ref: '#/components/parameters/Vipps-System-Version'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Name'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Version'
        - in: path
          name: ledgerId
          required: true
          schema:
            type: string
            description: Ledger ID provided by GET:/settlement/v1/ledgers
        - in: path
          name: topic
          required: true
          schema:
            type: string
            enum: 
              - funds
              - fees
            description: One of `funds`, `fees`
        - in: query
          required: false
          name: cursor
          schema:
            type: string
            example: "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ=="
            description: |-
              We limit the amount of rows returned to reduce the amount of data we need to process on each request. 
              If the total number of rows is greater than that amount we return a cursor in addition to
              the rows in the body. This cursor given can be used with this parameter to fetch the next set of ledgers.
              If this is used, no other parameters is needed.
      responses:
        200:
          $ref: "#/components/responses/200"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  "/report/v1/ledgertransactions":
    get:
      summary: Returns a list of payments/transactions.
      deprecated: true
      description: |
        Returns a list of payments/transactions.
      tags:
        - /report/v1 (deprecated)
      parameters:
        - $ref: "#/components/parameters/JWT"
        - $ref: '#/components/parameters/Vipps-System-Name'
        - $ref: '#/components/parameters/Vipps-System-Version'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Name'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Version'
        - in: query
          required: true
          name: ledgerId
          schema:
            type: string
        - in: query
          required: false
          name: ledgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-20
        - in: query
          required: false
          name: fromLedgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-19
        - in: query
          required: false
          name: toLedgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-22
        - in: query
          required: false
          name: inPayout
          schema:
            type: string
            example: 2000010
        - in: query
          required: false
          name: sincePayout
          schema:
            type: string
            example: 2000010
        - in: query
          required: false
          name: cursor
          schema:
            type: string
            example: "eyJsZWRnZXJJZCI6Inh4eCIsInN0YXJ0VHJhbnNhY3Rpb25JZCI6IjAwMDAwMDAwMDEiLCJzdGFydFRpbWUiOiIyMDIwLTExLTIwVDE0OjEzOjM4LjU3MDgzN1oiLCJlbmRUaW1lIjpudWxsLCJzdGFydExlZGdlckRhdGUiOiIyMDIwLTExLTIwIiwiZW5kTGVkZ2VyRGF0ZSI6bnVsbH0="
            description: |-
              We limit the amount of rows returned to reduce the amount of data we need to process on each request. 
              If the total number of rows is greater than that amount we return a cursor in addition to
              the rows in the body. This cursor given can be used with this parameter to fetch the next set of transactions.
              If this is used, no other parameters other than ledgerId is needed.
      responses:
        500:
          "$ref": "#/components/responses/500"
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    type: string
                    example: "eyJsZWRnZXJJZCI6Inh4eCIsInN0YXJ0VHJhbnNhY3Rpb25JZCI6IjAwMDAwMDAwMDEiLCJzdGFydFRpbWUiOiIyMDIwLTExLTIwVDE0OjEzOjM4LjU3MDgzN1oiLCJlbmRUaW1lIjpudWxsLCJzdGFydExlZGdlckRhdGUiOiIyMDIwLTExLTIwIiwiZW5kTGVkZ2VyRGF0ZSI6bnVsbH0="
                    description: |-
                      A cursor that can be used to fetch the next transactions.
                      It is empty if there are no more rows to fetch after the current one.
                      You can insert this value into the url as part of the cursor parameter.
                  items:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Transaction"

components:
  parameters:
    JWT:
      name: Authorization
      in: header
      description: >-
        The access token is a base64-encoded string that is required for all API calls.
        It is a JWT (JSON Web Token).
        The access token is fetched from the
        [`POST:/accesstoken/get`](https://developer.vippsmobilepay.com/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        endpoint.
        It is valid for 1 hour in the test environment and 24 hours in the production environment.
      required: true
      schema:
        type: string
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
    Vipps-System-Name:
      name: Vipps-System-Name
      in: header
      description: |-
        The name of the ecommerce solution.
        One word in lowercase letters is good.
        See [HTTP headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
        maxLength: 30
        example: woocommerce
    Vipps-System-Version:
      name: Vipps-System-Version
      in: header
      description: |-
        The version number of the ecommerce solution.
        See [HTTP headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
        maxLength: 30
        example: '5.4.0'
    Vipps-System-Plugin-Name:
      name: Vipps-System-Plugin-Name
      in: header
      description: |-
        The name of the ecommerce plugin (if applicable).
        One word in lowercase letters is good.
        See [HTTP headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
        maxLength: 30
        example: "vipps-woocommerce"
    Vipps-System-Plugin-Version:
      name: Vipps-System-Plugin-Version
      in: header
      description: |-
        The version number of the ecommerce plugin (if applicable).
        See [HTTP headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
        maxLength: 30
        example: "1.2.1"
  responses:
    200:
      description: "OK"
      content:
        application/json:
          schema:
            type: object
            properties:
              cursor:
                type: string
                example: "eyJsZWRnZXJJZCI6Inh4eCIsInN0YXJ0VHJhbnNhY3Rpb25JZCI6IjAwMDAwMDAwMDEiLCJzdGFydFRpbWUiOiIyMDIwLTExLTIwVDE0OjEzOjM4LjU3MDgzN1oiLCJlbmRUaW1lIjpudWxsLCJzdGFydExlZGdlckRhdGUiOiIyMDIwLTExLTIwIiwiZW5kTGVkZ2VyRGF0ZSI6bnVsbH0="
                description: |-
                  A cursor that can be used to fetch the next transactions.
                  It is empty if there are no more rows to fetch after the current one.
                  You can insert this value into the url as part of the cursor parameter.
              items:
                type: array
                items:
                  "$ref": "#/components/schemas/Transaction"
              tryLater:
                type: boolean
                example: false
                description: |-
                  Indicates that data is not yet available, and that you should pause for some time
                  before trying again. For the `.../feed` endpoint this means you are at the
                  end of the feed; wait at least a second before continuing to consume the feed
                  like normal. For the `.../dates/...` endpoint it means that the date has not
                  yet been "closed" so that the report is not complete; try the same request
                  again in at least half an hour.
    500:
      description: Server error
      content:
        application/json:
          schema:
            type: object
            properties:
              errorCode:
                type: number
                description: The error-code for the problem
                example: 100001
              errorMessage:
                type: string
                description: A human readable summary of the problem
                example: "Your request parameters didn't validate."
              contextId:
                type: string
                description: Unique id for the request which can be used to find related events (logs)
                example: "123e4567-e89b-12d3-a456-426655440000"
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: Unauthorized
              message:
                type: string
                example: "Please check your API keys"
  schemas:
    BankAccount:
      type: object
      properties:
        scheme:
          type: string
          description: |-
            The scheme for the bank account, typically account identifier type (BBAN) and
            country code (`NO`, `DK`, `FI`, etc), separated by a colon (':').
          example: "BBAN:NO"
        id:
          type: string
          description: The bank account id, typically the account number.
          example: "86011117947"
    Ledger:
      type: object
      properties:
        ledgerId:
          type: string
          description: The id for the ledger.
          example: "302321"
        payoutBankAccount:
          $ref: "#/components/schemas/BankAccount"
        firstPayout:
          type: string
          description: The first payout (bank transfer) in this ledger.
          nullable: true
          example: "2000001"
        lastPayout:
          type: string
          description: The last payout (bank transfer) in this ledger.
          nullable: true
          example: "2000045"
        owner:
          $ref: "#/components/schemas/Organization"
        settlesForRecipientHandles:
          type: array
          items:
            type: string
            description: |-
              Identification of the sales unit that this payment was made to/from.
              Contains a country code and id, separated by a colon (':').
            example: "NO:123455"
    Problem:
      title: Problem
      type: object
      properties:
        type:
          type: string
          format: uri
          example: "https://example.com/problem/unauthorized"
          description: A URI reference that identifies the problem type.
        title:
          type: string
          example: "Not authorized to create a product order"
          description: "A short, human-readable summary of the problem type.  It will not change from occurrence to occurrence of the problem."
        status:
          type: integer
          description: The HTTP response code
          example: 401
        detail:
          type: string
          example: "Not authorized to create a product order. Check whether Authorization token and Ocp-Apim-Subscription-Key are correct."
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          example: "/products/orders"
          description: A URI reference that identifies the specific occurrence of the problem
    Transaction:
      type: object
      properties:
        pspReference:
          type: string
          description: |-
            A reference automatically generated by Vipps MobilePay for this payment.
            One `reference` may have several `pspReference`s, since one `reference`
            may - for example - both be captured and refunded.
            This is the same id that has previously been called `transactionId`.
          example: '3343121302'
        time:
          type: string
          description: |-
            Transaction date and time together with an offset (difference from UTC time in hours).
          format: DateTimeOffset
          example: '2020-10-05T10:21:54.141089+0200'
        ledgerDate:
          type: string
          format: Date in YYYY-MM-DD format.
          example: '2020-10-05'
        entryType:
          type: string
          description: The type of transaction.
          enum:
            - refund
            - capture
            - fees-retained
            - fees-invoiced
            - scheduled-for-payout
            - payout-aborted
            - retained-disputed-capture
            - returned-disputed-capture
            - correction
            - capture-fee
            - top-up
        reference:
          type: string
          description: |-
            The unique id provided by the merchant (or partner) when initiating the paymemt.
            In the ePayment API this is called `reference`, and in the older eCom API it is called `orderId`.
            Is sometimes called "end to end reference", since this id identifies the payment from start to finish.
          example: acme-shop-123-order123abc
        currency:
          type: string
          example: 'NOK'
          description: Currency code as defined in ISO 4217. Typically `NOK`, `DKK` or `EUR.`
        amount:
          $ref: "#/components/schemas/Money"
        balanceBefore:
          $ref: "#/components/schemas/Money"
        balanceAfter:
          $ref: "#/components/schemas/Money"
        recipientHandle:
          type: string
          description: |-
            Identification of the sales unit that this payment was made to/from.
            Contains a country code and id, separated by a colon (':').
          example: "NO:123455"

    Organization:
      type: object
      properties:
        id:
          type: string
          description: The identifier for this organization.
          example: "987654321"
        scheme:
          type: string
          description: |-
            The type of organization identifier.
            For businesses this is typically
            `business:countryCode:type`, for example
            `business:NO:org`, `business:DK:org`, `business:FI:org`, etc.
          example: "business:NO:ORG"
    Money:
      type: number
      format: int32
      description: |-
        Amounts are specified in minor units.
        For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
      example: 49900
