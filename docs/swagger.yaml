---
openapi: 3.0.2
info:
  title: Vipps Report API
  description: |
    For details, see the [API Guide](https://vippsas.github.io/vipps-developer-docs/docs/APIs/report-api).
  version: '1.0'
servers:
  - url: https://apitest.vipps.no
  - url: https://api.vipps.no
paths:

  "/settlement/v1/ledgers":
    get:
      summary: Returns the ledgers you have access to
      description: |
        Returns the ledgers you have access to.

        If you are integrating a single
        merchant it may be enough to hit this endpoint once manually to identify
        the `ledgerId`.

        There is no need to specify the merchant or sales unit.
        The response contains all ledgers that are available for the API keys used.

        The `settlesForRecipientHandles` part of the response looks a bit different for eCom sales
        units and Vippsnummer. For eCom it looks like this:
        ```json
        {
          "settlesForRecipientHandles": [ "api:123455" ]
        }
        ```
        while for a Vippsnummer you will get

        ```json
        {
          "settlesForRecipientHandles": [ "nor:123455" ]
        }
        ```

        The full response example below displays the eCom case.

      parameters:
        - $ref: "#/components/parameters/JWT"
        - in: query
          name: settlesForRecipientHandles
          required: false
          schema:
            type: string
            example: "api:123456"
            description: Filters for ledgers that settles for the given settlesForRecipientHandle
        - in: query
          required: false
          name: cursor
          schema:
            type: string
            example: "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ=="
            description: |-
              We limit the amount of rows returned to reduce the amount of data we need to process on each request. 
              If the total number of rows is greater than that amount we return a cursor in addition to
              the rows in the body. This cursor given can be used with this parameter to fetch the next set of ledgers.
              If this is used, no other parameters is needed.
      responses:
        500:
          "$ref": "#/components/responses/500"
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    type: string
                    example: "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ=="
                    description: |-
                      A cursor that can be used to fetch the next ledgers.
                      It is empty if there are no more rows to fetch after the current one.
                      You can insert this value into the url as part of the cursor parameter.
                  items:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Ledger"
                example:
                  {
                    "cursor": "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ==",
                    "items": [
                      {
                        "ledgerId": "302321",
                        "currency": "NOK",
                        "payoutBankAccount": {
                          "scheme": "BBAN:NO",
                          "id": "86011117947"
                        },
                        "firstPayout": "2000001",
                        "lastPayout": "2000045",
                        "owner": {
                          "scheme": "business:NO:ORG",
                          "id": "987654321"
                        },
                        "settlesForRecipientHandles": [ "api:123455" ]
                      }
                    ]
                  }

  "/report/v1/ledgertransactions":
    get:
      summary: Returns a list of payments/transactions.
      description: |
        Returns a list of payments/transactions.
      parameters:
        - $ref: "#/components/parameters/JWT"
        - in: path
          required: true
          name: ledgerId
          schema:
            type: string
        - in: query
          required: false
          name: ledgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-20
        - in: query
          required: false
          name: fromLedgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-19
        - in: query
          required: false
          name: toLedgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-22
        - in: query
          required: false
          name: inPayout
          schema:
            type: string
            example: 2000010
        - in: query
          required: false
          name: sincePayout
          schema:
            type: string
            example: 2000010
        - in: query
          required: false
          name: cursor
          schema:
            type: string
            example: "eyJsZWRnZXJJZCI6Inh4eCIsInN0YXJ0VHJhbnNhY3Rpb25JZCI6IjAwMDAwMDAwMDEiLCJzdGFydFRpbWUiOiIyMDIwLTExLTIwVDE0OjEzOjM4LjU3MDgzN1oiLCJlbmRUaW1lIjpudWxsLCJzdGFydExlZGdlckRhdGUiOiIyMDIwLTExLTIwIiwiZW5kTGVkZ2VyRGF0ZSI6bnVsbH0="
            description: |-
              We limit the amount of rows returned to reduce the amount of data we need to process on each request. 
              If the total number of rows is greater than that amount we return a cursor in addition to
              the rows in the body. This cursor given can be used with this parameter to fetch the next set of transactions.
              If this is used, no other parameters other than ledgerId is needed.
      responses:
        500:
          "$ref": "#/components/responses/500"
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    type: string
                    example: "eyJsZWRnZXJJZCI6Inh4eCIsInN0YXJ0VHJhbnNhY3Rpb25JZCI6IjAwMDAwMDAwMDEiLCJzdGFydFRpbWUiOiIyMDIwLTExLTIwVDE0OjEzOjM4LjU3MDgzN1oiLCJlbmRUaW1lIjpudWxsLCJzdGFydExlZGdlckRhdGUiOiIyMDIwLTExLTIwIiwiZW5kTGVkZ2VyRGF0ZSI6bnVsbH0="
                    description: |-
                      A cursor that can be used to fetch the next transactions.
                      It is empty if there are no more rows to fetch after the current one.
                      You can insert this value into the url as part of the cursor parameter.
                  items:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Transaction"

components:
  parameters:
    JWT:
      name: Authorization
      in: header
      description: |-
        The access token is a base64-encoded string that is required for all API calls.
        It is a JWT (JSON Web Token).
        It is valid for 1 hour in the test environment and 24 hours in the production environment.
      required: true
      schema:
        type: string
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."

  responses:
    500:
      description: Server error
      content:
        application/json:
          schema:
            type: object
            properties:
              errorCode:
                type: number
                description: The error-code for the problem
                example: 100001
              errorMessage:
                type: string
                description: A human readable summary of the problem
                example: "Your request parameters didn't validate."
              contextId:
                type: string
                description: Unique id for the request which can be used to find related events (logs)
                example: "123e4567-e89b-12d3-a456-426655440000"
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: Unauthorized
              message:
                type: string
                example: "Please check your API keys"
  schemas:
    BankAccount:
      type: object
      properties:
        scheme:
          type: string
          example: "BBAN:NO"
        id:
          type: string
          example: "86011117947"
    Ledger:
      type: object
      properties:
        ledgerId:
          type: string
          example: "302321"
        payoutBankAccount:
          $ref: "#/components/schemas/BankAccount"
        firstPayout:
          type: string
          nullable: true
          example: "2000001"
        lastPayout:
          type: string
          nullable: true
          example: "2000045"
        owner:
          $ref: "#/components/schemas/Organization"
        settlesForRecipientHandles:
          type: array
          items:
            type: string
            example: "nor:123455"
    Transaction:
      type: object
      properties:
        transactionId:
          type: string
          example: '2000001'
        timestamp:
          type: string
          description: |-
            Transaction date and time together with an offset (difference from UTC time in hours)
          format: DateTimeOffset
          example: '2020-10-05T10:21:54.141089+0200'
        ledgerDate:
          type: string
          format: Date
          example: '2020-10-05'
        ledgerId:
          type: string
          example: '1'
        transactionType:
          type: string
          enum:
            - refund
            - capture
            - payout
            # - invoice
        orderId:
          type: string
          description: |-
            Is also called End-To-End-Reference
          example: acme-shop-123-order123abc
        currency:
          type: string
          example: 'NOK'
          description: Currency code as defined in ISO 4217
        ledgerAmount:
          $ref: "#/components/schemas/Money"
        grossAmount:
          $ref: "#/components/schemas/Money"
        fee:
          $ref: "#/components/schemas/Money"
        recipientHandle:
          type: string
          example: "nor:123455"

    Organization:
      type: object
      properties:
        id:
          type: string
          example: "987654321"
        scheme:
          type: string
          example: "business:NO:ORG"
    Money:
      type: number
      format: int32
      description: |-
        Amounts are specified in minor units.
        For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
      example: 49900