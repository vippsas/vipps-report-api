---
openapi: 3.0.2
info:
  title: Report API
  version: '1.0'
servers:
  - url: https://apitest.vipps.no
  - url: https://api.vipps.no
paths:

  "/settlement/v1/ledgers":
    get:
      summary: Returns the ledgers you have access to
      description: |
        Returns the ledgers you have access to.

        If you are integrating a single
        merchant it may be enough to hit this endpoint once manually to identify
        the `ledgerId`.

        There is no need to specify the merchant or sale unit.
        The response contains all ledgers that are available for the API keys used.

        The `settlesForRecipientHandles` part of the response looks a bit different for eCom sales
        units and Vippsnummer. For eCom it looks like this:
        ```json
        {
          "settlesForRecipientHandles": [ "api/123455" ]
        }
        ```
        while for a Vippsnummer you will get

        ```json
        {
          "settlesForRecipientHandles": [ "NO/123455" ]
        }
        ```

        The full response example below displays the eCom case.

      parameters:
        - $ref: "#/components/parameters/JWT"
        - in: query
          name: settlesForRecipientHandles
          required: false
          schema:
            type: string
            example: "api/123456"
            description: Filters for ledgers that settles for the given settlesForRecipientHandle
      responses:
        500:
          "$ref": "#/components/responses/500"
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Ledger"
                example:
                  {
                    "items": [
                      {
                        "ledgerId": "302321",
                        "currency": "NOK",
                        "payoutBankAccount": {
                          "country": "NO",
                          "accountNumber": "86011117947"
                        },
                        "firstPayout": "2000001",
                        "lastPayout": "2000045",
                        "owner": {
                          "jurisdiction": "NO",
                          "id": "987654321"
                        },
                        "settlesForRecipientHandles": [ "api/123455" ]
                      }
                    ]
                  }

  "/report/v1/transactions?ledgerId={ledgerId}":
    get:
      summary: Returns a list of payments/transactions.
      description: |
        Returns a list of payments/transactions.
      parameters:
        - $ref: "#/components/parameters/JWT"
        - in: path
          required: true
          name: ledgerId
          schema:
            type: string
        - in: query
          required: false
          name: ledgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-20
        - in: query
          required: false
          name: fromLedgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-19
        - in: query
          required: false
          name: toLedgerDate
          schema:
            type: string
            format: Date
            example: 2022-01-22
        - in: query
          required: false
          name: inPayout
          schema:
            type: string
            example: 2000010
        - in: query
          required: false
          name: sincePayout
          schema:
            type: string
            example: 2000010
        - in: query
          required: false
          name: cursor
          schema:
            type: string
            description: |-
              A cursor that can be used to fetch the next transactions.
              If this is used, no other parameters other than ledgerId is needed.
      responses:
        500:
          "$ref": "#/components/responses/500"
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    type: string
                    description: |-
                      A cursor that can be used to fetch the next transactions. 
                      It is empty if there are no more rows to fetch after the current one.
                  items:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Transaction"

components:
  parameters:
    JWT:
      name: Authorization
      in: header
      description: |-
        The access token is a base64-encoded string that is required for all API calls.
        It is a JWT (JSON Web Token).
        It is valid for 1 hour in the test environment and 24 hours in the production environment.
      required: true
      schema:
        type: string
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."

  responses:
    500:
      description: Server error
      content:
        application/json:
          schema:
            type: object
            properties:
              errorCode:
                type: number
                description: The error-code for the problem
                example: 100001
              errorMessage:
                type: string
                description: A human readable summary of the problem
                example: "Your request parameters didn't validate."
              contextId:
                type: string
                description: Unique id for the request which can be used to find related events (logs)
                example: "123e4567-e89b-12d3-a456-426655440000"
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: Unauthorized
              message:
                type: string
                example: "Please check your API keys"
  schemas:
    BankAccount:
      type: object
      properties:
        country:
          type: string
          example: "NO"
        accountNumber:
          type: string
          example: "86011117947"
    Ledger:
      type: object
      properties:
        ledgerId:
          type: string
          example: "302321"
        payoutBankAccount:
          $ref: "#/components/schemas/BankAccount"
        firstPayout:
          type: string
          nullable: true
          example: "2000001"
        lastPayout:
          type: string
          nullable: true
          example: "2000045"
        owner:
          $ref: "#/components/schemas/Organization"
        settlesForRecipientHandles:
          type: array
          items:
            type: string
            example: "NO/123455"
    Transaction:
      type: object
      properties:
        transactionId:
          type: string
          example: '2000001'
        timestamp:
          type: string
          format: DateTime
          example: '2020-10-05T10:21:54.141089Z'
        ledgerDate:
          type: string
          format: Date
          example: '2020-10-05'
        ledgerId:
          type: string
          example: '1'
        transactionType:
          type: string
          enum:
            - refund
            - capture
            - payout
            # - invoice
        orderId:
          type: string
          description: |-
            Is also called End-To-End-Reference
          example: acme-shop-123-order123abc
        currency:
          type: string
          example: 'NOK'
          description: Currency code as defined in ISO 4217
        ledgerAmount:
          $ref: "#/components/schemas/Money"
        grossAmount:
          $ref: "#/components/schemas/Money"
        fee:
          $ref: "#/components/schemas/Money"
        payoutNumber:
          type: string
        recipientHandle:
          type: string
          example: "NO/123455"

    Organization:
      type: object
      properties:
        id:
          type: string
          example: "987654321"
        jurisdiction:
          type: string
          enum:
            - "NO"
          example: "NO"
    Money:
      type: number
      format: int32
      description: |-
        Amounts are specified in minor units.
        For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
      example: 49900