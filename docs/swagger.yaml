---
openapi: 3.0.2
info:
  title: Vipps Report API
  description: |
    For details, see the [API Guide](https://developer.vippsmobilepay.com/docs/APIs/report-api).
  version: '1.0'
servers:
  - url: https://apitest.vipps.no
  - url: https://api.vipps.no
tags: []
paths:
  "/settlement/v1/ledgers":
    get:
      summary: Returns the ledgers you have access to
      description: |
        Returns the ledgers you have access to.

        If you are integrating a single
        merchant it may be enough to hit this endpoint once manually to identify
        the `ledgerId`, and then put that in your configuration.
        If you are integrating for an accounting system or similar, you should
        call this endpoint periodically in order to synchronize the list
        of ledgers you have access to.

        There is no need to specify the merchant or sales unit.
        The response contains all ledgers that are available for the API keys used.

        The `settlesForRecipientHandles` part of the response looks a bit different for eCom sales
        units and Vippsnummer. For eCom it looks like this:
        ```json
        {
          "settlesForRecipientHandles": [ "api:123455" ]
        }
        ```
        while for a Vippsnummer you will get

        ```json
        {
          "settlesForRecipientHandles": [ "NO:123455" ]
        }
        ```

        The full response example below displays the eCom case.

      tags:
        - /settlement/v1
      operationId: getLedgers
      parameters:
        - $ref: "#/components/parameters/JWT"
        - $ref: '#/components/parameters/Vipps-System-Name'
        - $ref: '#/components/parameters/Vipps-System-Version'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Name'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Version'
        - in: query
          name: settlesForRecipientHandles
          required: false
          schema:
            type: string
            example: "api:123456"
            description: Filters for ledgers that settles for the given settlesForRecipientHandle
        - in: query
          required: false
          name: cursor
          schema:
            type: string
            example: "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ=="
            description: |-
              We limit the amount of rows returned to reduce the amount of data we need to process on each request. 
              If the total number of rows is greater than that amount we return a cursor in addition to
              the rows in the body. This cursor given can be used with this parameter to fetch the next set of ledgers.
              If this is used, no other parameters is needed.
      responses:
        500:
          "$ref": "#/components/responses/500"
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    type: string
                    example: "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ=="
                    description: |-
                      A cursor that can be used to fetch the next ledgers.
                      It is empty if there are no more rows to fetch after the current one.
                      You can insert this value into the url as part of the cursor parameter.
                  items:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Ledger"
                example:
                  {
                    "cursor": "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ==",
                    "items": [
                      {
                        "ledgerId": "302321",
                        "currency": "NOK",
                        "payoutBankAccount": {
                          "scheme": "BBAN:NO",
                          "id": "86011117947"
                        },
                        "firstPayout": "2000001",
                        "lastPayout": "2000045",
                        "owner": {
                          "scheme": "business:NO:ORG",
                          "id": "987654321"
                        },
                        "settlesForRecipientHandles": [ "api:123455" ]
                      }
                    ]
                  }
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  "/report/v2/ledgers/{LedgerId}/{Account}/dates/{LedgerDate}":
    get:
      tags:
        - /report/v2/ledgers
      summary: Fetch report by date
      description: |-
        Complete report of entries on an account for a given "ledger date".
        A "ledger date" normally lasts from midnight to midnight in the timezone
        of the merchant; but it can be configured to other cutoffs such as 04:00 to 04:00.
        The caller should periodically poll for a report for the next date to download,
        and interpret HTTP 404 as a signal to try again later.

      parameters:
        - $ref: '#/components/parameters/Vipps-System-Name'
        - $ref: '#/components/parameters/Vipps-System-Version'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Name'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Version'
        - in: path
          name: LedgerId
          required: true
          schema:
            type: string
            description: Ledger ID provided by GET:/settlement/v1/ledgers
        - in: path
          name: LedgerDate
          required: true
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2}'
            description: Date in format yyyy-MM-dd
        - in: path
          name: Account
          required: true
          schema:
            type: string
            enum: ["funds", "fees"]
            description: One of `funds`, `fees`
        - in: query
          required: false
          name: cursor
          schema:
            type: string
            example: "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ=="
            description: |-
              We limit the amount of rows returned to reduce the amount of data we need to process on each request. 
              If the total number of rows is greater 'than that amount we return a cursor in addition to
              the rows in the body. This cursor given can be used with this parameter to fetch the next set of ledgers.
              If this is used, no other parameters is needed.
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          description: The report for this date is not available yet
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

  "/report/v2/ledgers/{LedgerId}/{Account}/feed":
    get:
      tags:
        - /report/v2/ledgers
      summary: Fetch report by feed
      description: |-
        Continuous stream of data. Upon reaching the end of the feed the `cursor` will not become empty and `items` can 
        become en empty list. One should retry to fetch the same `cursor` until new data and a new `cursor` will be returned.
        Unless in the need of data with low latency try not to poll the endpoint too often and effectively batch your reports.
      parameters:
        - $ref: '#/components/parameters/Vipps-System-Name'
        - $ref: '#/components/parameters/Vipps-System-Version'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Name'
        - $ref: '#/components/parameters/Vipps-System-Plugin-Version'
        - in: path
          name: LedgerId
          required: true
          schema:
            type: string
            description: Ledger ID provided by GET:/settlement/v1/ledgers
        - in: path
          name: Account
          required: true
          schema:
            type: string
            enum: ["funds", "fees"]
            description: One of `funds`, `fees`
        - in: query
          required: false
          name: cursor
          schema:
            type: string
            example: "eyJhZnRlckxlZGdlcklkIjoieHh4eCIsInNldHRsZXNGb3JSZWNpcGllbnRIYW5kbGVzIjpudWxsfQ=="
            description: |-
              We limit the amount of rows returned to reduce the amount of data we need to process on each request. 
              If the total number of rows is greater than that amount we return a cursor in addition to
              the rows in the body. This cursor given can be used with this parameter to fetch the next set of ledgers.
              If this is used, no other parameters is needed.
      responses:
        200:
          $ref: "#/components/responses/200"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
        default:
          description: Default problem response
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"

components:
  parameters:
    JWT:
      name: Authorization
      in: header
      description: >-
        The access token is a base64-encoded string that is required for all API calls.
        It is a JWT (JSON Web Token).
        The access token is fetched from the
        [`POST:/accesstoken/get`](https://developer.vippsmobilepay.com/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        endpoint.
        It is valid for 1 hour in the test environment and 24 hours in the production environment.
      required: true
      schema:
        type: string
        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni..."
    Vipps-System-Name:
      name: Vipps-System-Name
      in: header
      description: |-
        The name of the ecommerce solution.
        One word in lowercase letters is good.
        See [http-headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
        maxLength: 30
        example: woocommerce
    Vipps-System-Version:
      name: Vipps-System-Version
      in: header
      description: |-
        The version number of the ecommerce solution.
        See [http-headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
        maxLength: 30
        example: '5.4.0'
    Vipps-System-Plugin-Name:
      name: Vipps-System-Plugin-Name
      in: header
      description: |-
        The name of the ecommerce plugin (if applicable).
        One word in lowercase letters is good.
        See [http-headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
        maxLength: 30
        example: "vipps-woocommerce"
    Vipps-System-Plugin-Version:
      name: Vipps-System-Plugin-Version
      in: header
      description: |-
        The version number of the ecommerce plugin (if applicable).
        See [http-headers](https://developer.vippsmobilepay.com/docs/common-topics/http-headers).
      schema:
        type: string
        maxLength: 30
        example: "1.2.1"
  responses:
    200:
      description: "OK"
      content:
        application/json:
          schema:
            type: object
            properties:
              cursor:
                type: string
                example: "eyJsZWRnZXJJZCI6Inh4eCIsInN0YXJ0VHJhbnNhY3Rpb25JZCI6IjAwMDAwMDAwMDEiLCJzdGFydFRpbWUiOiIyMDIwLTExLTIwVDE0OjEzOjM4LjU3MDgzN1oiLCJlbmRUaW1lIjpudWxsLCJzdGFydExlZGdlckRhdGUiOiIyMDIwLTExLTIwIiwiZW5kTGVkZ2VyRGF0ZSI6bnVsbH0="
                description: |-
                  A cursor that can be used to fetch the next transactions.
                  It is empty if there are no more rows to fetch after the current one.
                  You can insert this value into the url as part of the cursor parameter.
              items:
                type: array
                items:
                  "$ref": "#/components/schemas/Transaction"
    500:
      description: Server error
      content:
        application/json:
          schema:
            type: object
            properties:
              errorCode:
                type: number
                description: The error-code for the problem
                example: 100001
              errorMessage:
                type: string
                description: A human readable summary of the problem
                example: "Your request parameters didn't validate."
              contextId:
                type: string
                description: Unique id for the request which can be used to find related events (logs)
                example: "123e4567-e89b-12d3-a456-426655440000"
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: Unauthorized
              message:
                type: string
                example: "Please check your API keys"
  schemas:
    BankAccount:
      type: object
      properties:
        scheme:
          type: string
          example: "BBAN:NO"
        id:
          type: string
          example: "86011117947"
    Ledger:
      type: object
      properties:
        ledgerId:
          type: string
          example: "302321"
        payoutBankAccount:
          $ref: "#/components/schemas/BankAccount"
        firstPayout:
          type: string
          nullable: true
          example: "2000001"
        lastPayout:
          type: string
          nullable: true
          example: "2000045"
        owner:
          $ref: "#/components/schemas/Organization"
        settlesForRecipientHandles:
          type: array
          items:
            type: string
            example: "NO:123455"
    Problem:
      title: Problem
      type: object
      properties:
        type:
          type: string
          format: uri
          example: "https://example.com/problem/unauthorized"
          description: A URI reference that identifies the problem type.
        title:
          type: string
          example: "Not authorized to create a product order"
          description: "A short, human-readable summary of the problem type.  It will not change from occurrence to occurrence of the problem."
        status:
          type: integer
          description: The HTTP response code
          example: 401
        detail:
          type: string
          example: "Not authorized to create a product order. Check whether Authorization token and Ocp-Apim-Subscription-Key are correct."
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          example: "/products/orders"
          description: A URI reference that identifies the specific occurrence of the problem
    Transaction:
      type: object
      properties:
        pspReference:
          type: string
          example: '3343121302'
        time:
          type: string
          description: |-
            Transaction date and time together with an offset (difference from UTC time in hours)
          format: DateTimeOffset
          example: '2020-10-05T10:21:54.141089+0200'
        ledgerDate:
          type: string
          format: Date
          example: '2020-10-05'
        entryType:
          type: string
          enum:
            - refund
            - capture
            - fees-retained
            - fees-invoiced
            - scheduled-for-payout
            - payout-aborted
            - retained-disputed-capture
            - returned-disputed-capture
            - correction
            - capture-fee
            - top-up
        reference:
          type: string
          description: |-
            Is also called End-To-End-Reference
          example: Vipps utbet. 2000023
        currency:
          type: string
          example: 'NOK'
          description: Currency code as defined in ISO 4217
        amount:
          $ref: "#/components/schemas/Money"
        balanceBefore:
          $ref: "#/components/schemas/Money"
        balanceAfter:
          $ref: "#/components/schemas/Money"
        recipientHandle:
          type: string
          example: "NO:123455"

    Organization:
      type: object
      properties:
        id:
          type: string
          example: "987654321"
        scheme:
          type: string
          example: "business:NO:ORG"
    Money:
      type: number
      format: int32
      description: |-
        Amounts are specified in minor units.
        For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
      example: 49900